{"version":3,"file":"tetris-game-DqfFQNN7.js","sources":["../../../src/games/tetris/index.tsx","../../../src/games/tetris/history.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GameState, TetrisBlock } from './types';\nimport './style.css';\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\nconst BASE_BLOCK_SIZE = 25;\n\nconst TETROMINOS = {\n  I: {\n    shape: [[1, 1, 1, 1]],\n    color: '#00f0f0',\n    type: 1 as TetrisBlock,\n  },\n  J: {\n    shape: [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    color: '#0000f0',\n    type: 2 as TetrisBlock,\n  },\n  L: {\n    shape: [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    color: '#f0a000',\n    type: 3 as TetrisBlock,\n  },\n  O: {\n    shape: [\n      [1, 1],\n      [1, 1],\n    ],\n    color: '#f0f000',\n    type: 4 as TetrisBlock,\n  },\n  S: {\n    shape: [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    color: '#00f000',\n    type: 5 as TetrisBlock,\n  },\n  T: {\n    shape: [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    color: '#a000f0',\n    type: 6 as TetrisBlock,\n  },\n  Z: {\n    shape: [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    color: '#f00000',\n    type: 7 as TetrisBlock,\n  },\n};\n\nconst Tetris: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    board: Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)),\n    currentPiece: null,\n    nextPiece: getRandomPiece(),\n    score: 0,\n    level: 1,\n    lines: 0,\n    gameOver: false,\n  });\n  const [isPaused, setIsPaused] = useState(false);\n  const navigate = useNavigate();\n  const requestRef = useRef<number>();\n  const lastTimeRef = useRef<number>(0);\n  const dropCounter = useRef<number>(0);\n  const dropInterval = useRef<number>(1000);\n  const [blockSize, setBlockSize] = useState(BASE_BLOCK_SIZE);\n\n  const touchStartRef = useRef<{ x: number; y: number } | null>(null);\n  const touchThreshold = 30;\n\n  function getRandomPiece() {\n    const pieces = Object.values(TETROMINOS);\n    const piece = pieces[Math.floor(Math.random() * pieces.length)];\n    return {\n      shape: piece.shape,\n      type: piece.type,\n    };\n  }\n\n  const initializeGame = useCallback(() => {\n    setGameState({\n      board: Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)),\n      currentPiece: {\n        shape: getRandomPiece().shape,\n        x: Math.floor(BOARD_WIDTH / 2) - 1,\n        y: 0,\n        type: getRandomPiece().type,\n      },\n      nextPiece: getRandomPiece(),\n      score: 0,\n      level: 1,\n      lines: 0,\n      gameOver: false,\n    });\n    setIsPaused(false);\n    dropInterval.current = 1000;\n  }, []);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!ctx || !canvas) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw board\n    gameState.board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          const piece = Object.values(TETROMINOS).find(p => p.type === value);\n          if (piece) {\n            ctx.fillStyle = piece.color;\n            ctx.fillRect(\n              x * blockSize,\n              y * blockSize,\n              blockSize - 1,\n              blockSize - 1\n            );\n          }\n        }\n      });\n    });\n\n    // Draw current piece\n    if (gameState.currentPiece) {\n      const piece = Object.values(TETROMINOS).find(\n        p => p.type === gameState.currentPiece?.type\n      );\n      if (piece) {\n        ctx.fillStyle = piece.color;\n        gameState.currentPiece.shape.forEach((row, y) => {\n          row.forEach((value, x) => {\n            if (value !== 0) {\n              ctx.fillRect(\n                (gameState.currentPiece!.x + x) * blockSize,\n                (gameState.currentPiece!.y + y) * blockSize,\n                blockSize - 1,\n                blockSize - 1\n              );\n            }\n          });\n        });\n      }\n    }\n  }, [gameState, blockSize]);\n\n  const collide = useCallback(\n    (piece: NonNullable<GameState['currentPiece']>) => {\n      for (let y = 0; y < piece.shape.length; y++) {\n        for (let x = 0; x < piece.shape[y].length; x++) {\n          if (piece.shape[y][x] !== 0) {\n            const boardX = piece.x + x;\n            const boardY = piece.y + y;\n\n            if (\n              boardX < 0 ||\n              boardX >= BOARD_WIDTH ||\n              boardY >= BOARD_HEIGHT ||\n              (boardY >= 0 && gameState.board[boardY][boardX] !== 0)\n            ) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    [gameState.board]\n  );\n\n  const rotatePiece = useCallback(\n    (piece: NonNullable<GameState['currentPiece']>) => {\n      const rotated = piece.shape[0].map((_, i) =>\n        piece.shape.map(row => row[i]).reverse()\n      );\n      const newPiece = { ...piece, shape: rotated };\n\n      if (!collide(newPiece)) {\n        setGameState(prev => ({\n          ...prev,\n          currentPiece: newPiece,\n        }));\n      }\n    },\n    [collide]\n  );\n\n  const movePiece = useCallback(\n    (direction: 'left' | 'right' | 'down') => {\n      if (!gameState.currentPiece || gameState.gameOver || isPaused) return;\n\n      const newPiece = { ...gameState.currentPiece };\n      if (direction === 'left') newPiece.x -= 1;\n      if (direction === 'right') newPiece.x += 1;\n      if (direction === 'down') newPiece.y += 1;\n\n      if (!collide(newPiece)) {\n        setGameState(prev => ({ ...prev, currentPiece: newPiece }));\n      } else if (direction === 'down') {\n        // Merge piece with board\n        const newBoard = [...gameState.board];\n        gameState.currentPiece.shape.forEach((row, y) => {\n          row.forEach((value, x) => {\n            if (value !== 0) {\n              const boardY = gameState.currentPiece!.y + y;\n              if (boardY >= 0) {\n                newBoard[boardY][gameState.currentPiece!.x + x] =\n                  gameState.currentPiece!.type;\n              }\n            }\n          });\n        });\n\n        // Check for completed lines\n        let linesCleared = 0;\n        for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {\n          if (newBoard[y].every(value => value !== 0)) {\n            newBoard.splice(y, 1);\n            newBoard.unshift(Array(BOARD_WIDTH).fill(0));\n            linesCleared++;\n            y++;\n          }\n        }\n\n        // Update score and level\n        const newScore = gameState.score + linesCleared * 100 * gameState.level;\n        const newLines = gameState.lines + linesCleared;\n        const newLevel = Math.floor(newLines / 10) + 1;\n\n        // Check game over\n        const isGameOver = newBoard[0].some(cell => cell !== 0);\n\n        if (isGameOver) {\n          const history = JSON.parse(\n            localStorage.getItem('tetrisHistory') || '[]'\n          );\n          history.push({\n            score: newScore,\n            lines: newLines,\n            level: newLevel,\n            date: new Date().toLocaleString(),\n          });\n          localStorage.setItem('tetrisHistory', JSON.stringify(history));\n        }\n\n        setGameState(prev => ({\n          ...prev,\n          board: newBoard,\n          currentPiece: isGameOver\n            ? null\n            : {\n                ...prev.nextPiece,\n                x: Math.floor(BOARD_WIDTH / 2) - 1,\n                y: 0,\n              },\n          nextPiece: getRandomPiece(),\n          score: newScore,\n          lines: newLines,\n          level: newLevel,\n          gameOver: isGameOver,\n        }));\n\n        dropInterval.current = Math.max(100, 1000 - (newLevel - 1) * 100);\n      }\n    },\n    [gameState, collide, isPaused]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (gameState.gameOver) return;\n\n      switch (event.code) {\n        case 'ArrowLeft':\n          movePiece('left');\n          break;\n        case 'ArrowRight':\n          movePiece('right');\n          break;\n        case 'ArrowDown':\n          movePiece('down');\n          break;\n        case 'ArrowUp':\n          if (gameState.currentPiece) {\n            rotatePiece(gameState.currentPiece);\n          }\n          break;\n        case 'Space':\n          setIsPaused(prev => !prev);\n          break;\n      }\n    },\n    [gameState.gameOver, gameState.currentPiece, movePiece, rotatePiece]\n  );\n\n  const handleTouchStart = useCallback((event: React.TouchEvent) => {\n    if (gameState.gameOver || isPaused) return;\n    event.preventDefault(); // 阻止默认行为\n    const touch = event.touches[0];\n    touchStartRef.current = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n  }, [gameState.gameOver, isPaused]);\n\n  const handleTouchMove = useCallback((event: React.TouchEvent) => {\n    event.preventDefault(); // 阻止页面滚动\n  }, []);\n\n  const handleTouchEnd = useCallback((event: React.TouchEvent) => {\n    if (!touchStartRef.current || gameState.gameOver || isPaused) return;\n    event.preventDefault(); // 阻止默认行为\n    \n    const touch = event.changedTouches[0];\n    const deltaX = touch.clientX - touchStartRef.current.x;\n    const deltaY = touch.clientY - touchStartRef.current.y;\n    \n    // 调整滑动灵敏度\n    const minSwipeDistance = 20; // 降低触发阈值\n    \n    if (Math.abs(deltaX) > minSwipeDistance || Math.abs(deltaY) > minSwipeDistance) {\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        // 水平滑动\n        if (deltaX > 0) {\n          movePiece('right');\n        } else {\n          movePiece('left');\n        }\n      } else {\n        // 垂直滑动\n        if (deltaY < 0) {\n          // 向上滑动，旋转方块\n          if (gameState.currentPiece) {\n            rotatePiece(gameState.currentPiece);\n          }\n        } else {\n          // 向下滑动，加速下落\n          movePiece('down');\n        }\n      }\n    }\n    \n    touchStartRef.current = null;\n  }, [gameState.currentPiece, gameState.gameOver, isPaused, movePiece, rotatePiece]);\n\n  const update = useCallback(\n    (time: number) => {\n      const deltaTime = time - lastTimeRef.current;\n      lastTimeRef.current = time;\n\n      if (!isPaused && !gameState.gameOver) {\n        dropCounter.current += deltaTime;\n        if (dropCounter.current > dropInterval.current) {\n          movePiece('down');\n          dropCounter.current = 0;\n        }\n      }\n\n      draw();\n      requestRef.current = requestAnimationFrame(update);\n    },\n    [draw, gameState.gameOver, isPaused, movePiece]\n  );\n\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      // 计算合适的方块大小\n      const maxWidth = Math.min(window.innerWidth * 0.9, 500);\n      const maxHeight = window.innerHeight * 0.7;\n\n      const widthBasedSize = Math.floor(maxWidth / BOARD_WIDTH);\n      const heightBasedSize = Math.floor(maxHeight / BOARD_HEIGHT);\n\n      // 使用较小的值来确保完全适应屏幕\n      const newBlockSize = Math.min(widthBasedSize, heightBasedSize);\n\n      setBlockSize(newBlockSize);\n      canvas.width = newBlockSize * BOARD_WIDTH;\n      canvas.height = newBlockSize * BOARD_HEIGHT;\n    };\n\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.width = blockSize * BOARD_WIDTH;\n      canvas.height = blockSize * BOARD_HEIGHT;\n    }\n    initializeGame();\n  }, [initializeGame, blockSize]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div \n      className=\"tetris-container\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n      style={{\n        touchAction: 'none', // 禁用浏览器默认触摸行为\n        WebkitTouchCallout: 'none', // 禁用 iOS 触摸回调\n        WebkitUserSelect: 'none', // 禁用选择\n        userSelect: 'none',\n        width: '100%',\n        height: '100%'\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        width={BOARD_WIDTH * blockSize}\n        height={BOARD_HEIGHT * blockSize}\n        style={{\n          touchAction: 'none' // 确保 canvas 也禁用默认触摸行为\n        }}\n      />\n      <div className=\"game-header\">\n        <h1>Tetris</h1>\n        <div className=\"score-container\">\n          <div className=\"score-box\">Score: {gameState.score}</div>\n          <div className=\"score-box\">Level: {gameState.level}</div>\n          <div className=\"score-box\">Lines: {gameState.lines}</div>\n        </div>\n      </div>\n\n      <div className=\"game-controls\">\n        <button onClick={initializeGame}>New Game</button>\n        <button onClick={() => navigate('/tetris/history')}>History</button>\n        <button onClick={() => navigate('/')}>Back to Home</button>\n      </div>\n\n      {gameState.gameOver && (\n        <div className=\"game-over\">\n          <h2>Game Over!</h2>\n          <p>Score: {gameState.score}</p>\n          <button onClick={initializeGame}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tetris;\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GameHistory } from './types';\n\nconst TetrisHistory: React.FC = () => {\n  const [history, setHistory] = useState<GameHistory[]>([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('tetrisHistory');\n    if (savedHistory) {\n      setHistory(JSON.parse(savedHistory));\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Tetris History</h1>\n          <button\n            onClick={() => navigate('/tetris')}\n            className=\"px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-700\"\n          >\n            Back to Game\n          </button>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Score\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Lines\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Level\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {history.map((record, index) => (\n                <tr key={index}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {record.date}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.score}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.lines}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.level}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TetrisHistory;\n"],"names":["BOARD_WIDTH","BOARD_HEIGHT","BASE_BLOCK_SIZE","TETROMINOS","Tetris","canvasRef","useRef","gameState","setGameState","useState","getRandomPiece","isPaused","setIsPaused","navigate","useNavigate","requestRef","lastTimeRef","dropCounter","dropInterval","blockSize","setBlockSize","touchStartRef","pieces","piece","initializeGame","useCallback","draw","canvas","ctx","row","y","value","x","p","_a","collide","boardX","boardY","rotatePiece","rotated","_","newPiece","prev","movePiece","direction","newBoard","linesCleared","newScore","newLines","newLevel","isGameOver","cell","history","handleKeyDown","event","handleTouchStart","touch","handleTouchMove","handleTouchEnd","deltaX","deltaY","minSwipeDistance","update","time","deltaTime","useEffect","updateCanvasSize","maxWidth","maxHeight","widthBasedSize","heightBasedSize","newBlockSize","jsxs","jsx","TetrisHistory","setHistory","savedHistory","record","index"],"mappings":"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"}