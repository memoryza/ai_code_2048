{"version":3,"file":"maze-game-BTsE6UIQ.js","sources":["../../../src/games/maze/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './style.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface GameState {\n  board: string[][];\n  player: Position;\n  exit: Position;\n  gameWon: boolean;\n}\n\n// 动态设置迷宫大小\nconst BOARD_WIDTH = 15;  // 减小迷宫宽度，更适合手机屏幕\nconst BOARD_HEIGHT = 20; // 保持高度，但确保不会太大\nconst MIN_CELL_SIZE = 20; // 最小单元格大小\nconst MAX_CELL_SIZE = 40; // 最大单元格大小\n\nconst MazeGame: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    board: [],\n    player: { x: 1, y: 1 },\n    exit: { x: BOARD_WIDTH - 2, y: BOARD_HEIGHT - 2 },\n    gameWon: false\n  });\n  const [touchStart, setTouchStart] = useState<Position | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isPortrait, setIsPortrait] = useState(window.innerHeight > window.innerWidth);\n  const navigate = useNavigate();\n\n  // 计算最佳单元格大小\n  const calculateCellSize = useCallback(() => {\n    if (!containerRef.current) return MIN_CELL_SIZE;\n    \n    const container = containerRef.current;\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    \n    // 计算可用空间（减去边距和其他UI元素的空间）\n    const availableWidth = Math.min(screenWidth - 40, container.clientWidth - 40); // 40px for padding\n    const availableHeight = screenHeight - 200; // 减去头部和按钮的空间\n    \n    // 根据屏幕方向计算单元格大小\n    const cellWidth = Math.floor(availableWidth / BOARD_WIDTH);\n    const cellHeight = Math.floor(availableHeight / BOARD_HEIGHT);\n    \n    // 确保单元格大小在合理范围内\n    const calculatedSize = Math.min(cellWidth, cellHeight, MAX_CELL_SIZE);\n    return Math.max(calculatedSize, MIN_CELL_SIZE);\n  }, []);\n\n  const [cellSize, setCellSize] = useState(MIN_CELL_SIZE);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!canvas || !ctx) return;\n\n    // 清空画布\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 绘制迷宫\n    gameState.board.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        ctx.fillStyle = cell === 'wall' ? '#333' : \n                       cell === 'exit' ? '#4CAF50' : '#fff';\n        ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n        ctx.strokeStyle = '#666';\n        ctx.strokeRect(x * cellSize, y * cellSize, cellSize, cellSize);\n      });\n    });\n\n    // 绘制玩家\n    ctx.fillStyle = '#2196F3';\n    ctx.beginPath();\n    ctx.arc(\n      gameState.player.x * cellSize + cellSize / 2,\n      gameState.player.y * cellSize + cellSize / 2,\n      cellSize / 3,\n      0,\n      Math.PI * 2\n    );\n    ctx.fill();\n  }, [gameState, cellSize]);\n\n  // 处理屏幕方向变化\n  useEffect(() => {\n    const handleOrientationChange = () => {\n      setIsPortrait(window.innerHeight > window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleOrientationChange);\n    return () => window.removeEventListener('resize', handleOrientationChange);\n  }, []);\n\n  // 处理窗口大小变化\n  useEffect(() => {\n    const handleResize = () => {\n      const newCellSize = calculateCellSize();\n      setCellSize(newCellSize);\n      \n      const canvas = canvasRef.current;\n      if (canvas) {\n        canvas.width = BOARD_WIDTH * newCellSize;\n        canvas.height = BOARD_HEIGHT * newCellSize;\n        requestAnimationFrame(draw); // 使用 requestAnimationFrame 优化性能\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [calculateCellSize, draw]);\n\n  // 检查是否存在从起点到终点的路径\n  const hasValidPath = (maze: string[][], start: Position, end: Position): boolean => {\n    const visited = Array(BOARD_HEIGHT).fill(0).map(() =>\n      Array(BOARD_WIDTH).fill(false)\n    );\n    const queue: Position[] = [start];\n    visited[start.y][start.x] = true;\n\n    while (queue.length > 0) {\n      const current = queue.shift()!;\n      \n      if (current.x === end.x && current.y === end.y) {\n        return true;\n      }\n\n      // 检查四个方向\n      const directions = [\n        { dx: 0, dy: -1 }, // 上\n        { dx: 1, dy: 0 },  // 右\n        { dx: 0, dy: 1 },  // 下\n        { dx: -1, dy: 0 }  // 左\n      ];\n\n      for (const dir of directions) {\n        const newX = current.x + dir.dx;\n        const newY = current.y + dir.dy;\n\n        if (newX >= 0 && newX < BOARD_WIDTH &&\n            newY >= 0 && newY < BOARD_HEIGHT &&\n            !visited[newY][newX] &&\n            maze[newY][newX] !== 'wall') {\n          queue.push({ x: newX, y: newY });\n          visited[newY][newX] = true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const generateMaze = () => {\n    let maze: string[][];\n    let isValidMaze = false;\n    \n    // 不断生成迷宫直到有有效路径\n    while (!isValidMaze) {\n      // 初始化迷宫，所有格子都是墙\n      maze = Array(BOARD_HEIGHT).fill(0).map(() =>\n        Array(BOARD_WIDTH).fill('wall')\n      );\n\n      const stack: Position[] = [];\n      const start: Position = { x: 1, y: 1 };\n      maze[start.y][start.x] = 'path';\n      stack.push(start);\n\n      // 深度优先搜索生成迷宫\n      while (stack.length > 0) {\n        const current = stack[stack.length - 1];\n        const neighbors = [\n          { x: current.x + 2, y: current.y, between: { x: current.x + 1, y: current.y } },\n          { x: current.x - 2, y: current.y, between: { x: current.x - 1, y: current.y } },\n          { x: current.x, y: current.y + 2, between: { x: current.x, y: current.y + 1 } },\n          { x: current.x, y: current.y - 2, between: { x: current.x, y: current.y - 1 } }\n        ].filter(pos => \n          pos.x > 0 && pos.x < BOARD_WIDTH - 1 && \n          pos.y > 0 && pos.y < BOARD_HEIGHT - 1 && \n          maze[pos.y][pos.x] === 'wall'\n        );\n\n        if (neighbors.length > 0) {\n          // 改进的路径生成权重\n          neighbors.sort(() => {\n            const random = Math.random();\n            const distanceToExit = Math.abs(BOARD_WIDTH - 2 - current.x) + Math.abs(BOARD_HEIGHT - 2 - current.y);\n            const exitWeight = 1 - (distanceToExit / (BOARD_WIDTH + BOARD_HEIGHT));\n            \n            // 在靠近出口时增加向出口方向移动的概率\n            const directionBias = exitWeight * 0.3;\n            \n            // 添加一些随机性以创建多条路径\n            const randomFactor = random * 0.7;\n            \n            return (directionBias + randomFactor) - 0.5;\n          });\n          \n          // 有概率创建额外的路径\n          const createExtraPath = Math.random() < 0.2; // 20%的概率创建额外路径\n          if (createExtraPath && neighbors.length > 1) {\n            const extraNext = neighbors[1];\n            maze[extraNext.y][extraNext.x] = 'path';\n            maze[extraNext.between.y][extraNext.between.x] = 'path';\n          }\n          \n          const next = neighbors[0];\n          maze[next.y][next.x] = 'path';\n          maze[next.between.y][next.between.x] = 'path';\n          stack.push(next);\n        } else {\n          stack.pop();\n        }\n      }\n\n      // 设置出口\n      const exit: Position = { x: BOARD_WIDTH - 2, y: BOARD_HEIGHT - 2 };\n      maze[exit.y][exit.x] = 'exit';\n\n      // 验证是否存在有效路径\n      isValidMaze = hasValidPath(maze, { x: 1, y: 1 }, exit);\n      \n      // 如果没有有效路径，确保连接到出口\n      if (!isValidMaze) {\n        // 使用更自然的路径连接\n        let current = { x: exit.x - 1, y: exit.y };\n        while (current.x > 1 || current.y > 1) {\n          maze[current.y][current.x] = 'path';\n          \n          // 随机选择是先移动x还是y，使路径更自然\n          if (Math.random() < 0.5) {\n            if (current.x > 1) {\n              current.x--;\n              // 有时候添加一个支路\n              if (Math.random() < 0.3 && current.y > 2) {\n                maze[current.y - 1][current.x] = 'path';\n              }\n            } else if (current.y > 1) {\n              current.y--;\n            }\n          } else {\n            if (current.y > 1) {\n              current.y--;\n              // 有时候添加一个支路\n              if (Math.random() < 0.3 && current.x > 2) {\n                maze[current.y][current.x - 1] = 'path';\n              }\n            } else if (current.x > 1) {\n              current.x--;\n            }\n          }\n        }\n        \n        // 确保起点和终点附近有足够的空间\n        maze[1][2] = 'path';\n        maze[2][1] = 'path';\n        maze[exit.y - 1][exit.x] = 'path';\n        maze[exit.y][exit.x - 1] = 'path';\n        \n        // 再次验证\n        isValidMaze = hasValidPath(maze, { x: 1, y: 1 }, exit);\n      }\n    }\n\n    return maze;\n  };\n\n  const initializeGame = useCallback(() => {\n    const newBoard = generateMaze();\n    setGameState({\n      board: newBoard,\n      player: { x: 1, y: 1 },\n      exit: { x: BOARD_WIDTH - 2, y: BOARD_HEIGHT - 2 },\n      gameWon: false\n    });\n  }, []);\n\n  const movePlayer = useCallback((dx: number, dy: number) => {\n    setGameState(prev => {\n      const newX = prev.player.x + dx;\n      const newY = prev.player.y + dy;\n\n      // 检查是否可以移动到新位置\n      if (newX < 0 || newX >= BOARD_WIDTH || \n          newY < 0 || newY >= BOARD_HEIGHT || \n          prev.board[newY][newX] === 'wall') {\n        return prev;\n      }\n\n      // 检查是否到达出口\n      const gameWon = newX === prev.exit.x && newY === prev.exit.y;\n\n      return {\n        ...prev,\n        player: { x: newX, y: newY },\n        gameWon\n      };\n    });\n  }, []);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (gameState.gameWon) return;\n\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'w':\n      case 'W':\n        movePlayer(0, -1);\n        break;\n      case 'ArrowDown':\n      case 's':\n      case 'S':\n        movePlayer(0, 1);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n      case 'A':\n        movePlayer(-1, 0);\n        break;\n      case 'ArrowRight':\n      case 'd':\n      case 'D':\n        movePlayer(1, 0);\n        break;\n    }\n  }, [gameState.gameWon, movePlayer]);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (gameState.gameWon) return;\n    \n    const touch = e.touches[0];\n    setTouchStart({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchStart || gameState.gameWon) return;\n    \n    const touch = e.touches[0];\n    const deltaX = touch.clientX - touchStart.x;\n    const deltaY = touch.clientY - touchStart.y;\n    \n    // 检测移动距离是否足够触发移动（防止微小移动）\n    const minSwipeDistance = 30;\n    \n    if (Math.abs(deltaX) > minSwipeDistance || Math.abs(deltaY) > minSwipeDistance) {\n      // 判断主要移动方向\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        // 水平移动\n        movePlayer(deltaX > 0 ? 1 : -1, 0);\n      } else {\n        // 垂直移动\n        movePlayer(0, deltaY > 0 ? 1 : -1);\n      }\n      // 重置触摸起点，允许连续滑动\n      setTouchStart({\n        x: touch.clientX,\n        y: touch.clientY\n      });\n    }\n  };\n\n  const handleTouchEnd = () => {\n    setTouchStart(null);\n  };\n\n  useEffect(() => {\n    initializeGame();\n  }, [initializeGame]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = BOARD_WIDTH * cellSize;\n    canvas.height = BOARD_HEIGHT * cellSize;\n\n    draw();\n  }, [draw]);\n\n  return (\n    <div className=\"maze-container\" ref={containerRef}>\n      <div className={`game-area ${isPortrait ? 'portrait' : 'landscape'}`}>\n        <canvas\n          ref={canvasRef}\n          className=\"game-canvas\"\n          width={BOARD_WIDTH * cellSize}\n          height={BOARD_HEIGHT * cellSize}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        />\n        {gameState.gameWon && (\n          <div className=\"game-won\">\n            <h2>恭喜你赢了！</h2>\n            <button onClick={initializeGame}>再玩一次</button>\n          </div>\n        )}\n      </div>\n      <div className=\"game-controls\">\n        <button onClick={initializeGame}>重新开始</button>\n        <button onClick={() => navigate('/')}>返回首页</button>\n      </div>\n    </div>\n  );\n};\n\nexport default MazeGame;\n"],"names":["BOARD_WIDTH","BOARD_HEIGHT","MIN_CELL_SIZE","MAX_CELL_SIZE","MazeGame","gameState","setGameState","useState","touchStart","setTouchStart","canvasRef","useRef","containerRef","isPortrait","setIsPortrait","navigate","useNavigate","calculateCellSize","useCallback","container","screenWidth","screenHeight","availableWidth","availableHeight","cellWidth","cellHeight","calculatedSize","cellSize","setCellSize","draw","canvas","ctx","row","y","cell","x","useEffect","handleOrientationChange","handleResize","newCellSize","hasValidPath","maze","start","end","visited","queue","current","directions","dir","newX","newY","generateMaze","isValidMaze","stack","neighbors","pos","random","directionBias","randomFactor","extraNext","next","exit","initializeGame","newBoard","movePlayer","dx","dy","prev","gameWon","handleKeyDown","handleTouchStart","touch","handleTouchMove","deltaX","deltaY","minSwipeDistance","handleTouchEnd","jsxs","jsx"],"mappings":"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"}