{"version":3,"file":"maze-game-CcIuCQfA.js","sources":["../../../src/games/maze/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './style.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface GameState {\n  board: string[][];\n  player: Position;\n  exit: Position;\n  gameWon: boolean;\n}\n\nconst CELL_SIZE = 30;\nconst BOARD_WIDTH = 30;  // 增加迷宫宽度\nconst BOARD_HEIGHT = 20; // 增加迷宫高度\n\nconst MazeGame: React.FC = () => {\n  const [gameState, setGameState] = useState<GameState>({\n    board: [],\n    player: { x: 1, y: 1 },\n    exit: { x: BOARD_WIDTH - 2, y: BOARD_HEIGHT - 2 },\n    gameWon: false\n  });\n  const [touchStart, setTouchStart] = useState<Position | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const navigate = useNavigate();\n\n  // 计算单元格大小以适应屏幕\n  const calculateCellSize = useCallback(() => {\n    if (!containerRef.current) return CELL_SIZE;\n    \n    const container = containerRef.current;\n    const maxWidth = container.clientWidth * 0.9; // 留出一些边距\n    const maxHeight = (window.innerHeight - 200) * 0.9; // 减去头部和按钮的空间\n    \n    const cellWidth = Math.floor(maxWidth / BOARD_WIDTH);\n    const cellHeight = Math.floor(maxHeight / BOARD_HEIGHT);\n    \n    return Math.min(cellWidth, cellHeight);\n  }, []);\n\n  const [cellSize, setCellSize] = useState(CELL_SIZE);\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!canvas || !ctx) return;\n\n    // 清空画布\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 绘制迷宫\n    gameState.board.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        ctx.fillStyle = cell === 'wall' ? '#333' : \n                       cell === 'exit' ? '#4CAF50' : '#fff';\n        ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\n        ctx.strokeStyle = '#666';\n        ctx.strokeRect(x * cellSize, y * cellSize, cellSize, cellSize);\n      });\n    });\n\n    // 绘制玩家\n    ctx.fillStyle = '#2196F3';\n    ctx.beginPath();\n    ctx.arc(\n      gameState.player.x * cellSize + cellSize / 2,\n      gameState.player.y * cellSize + cellSize / 2,\n      cellSize / 3,\n      0,\n      Math.PI * 2\n    );\n    ctx.fill();\n  }, [gameState, cellSize]);\n\n  // 处理窗口大小变化\n  useEffect(() => {\n    const handleResize = () => {\n      const newCellSize = calculateCellSize();\n      setCellSize(newCellSize);\n      \n      const canvas = canvasRef.current;\n      if (canvas) {\n        canvas.width = BOARD_WIDTH * newCellSize;\n        canvas.height = BOARD_HEIGHT * newCellSize;\n        draw();\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [calculateCellSize, draw]);\n\n  const generateMaze = () => {\n    // 初始化迷宫，所有格子都是墙\n    const maze: string[][] = Array(BOARD_HEIGHT).fill(0).map(() =>\n      Array(BOARD_WIDTH).fill('wall')\n    );\n\n    const stack: Position[] = [];\n    const start: Position = { x: 1, y: 1 };\n    maze[start.y][start.x] = 'path';\n    stack.push(start);\n\n    // 深度优先搜索生成迷宫\n    while (stack.length > 0) {\n      const current = stack[stack.length - 1];\n      const neighbors = [\n        { x: current.x + 2, y: current.y, between: { x: current.x + 1, y: current.y } },\n        { x: current.x - 2, y: current.y, between: { x: current.x - 1, y: current.y } },\n        { x: current.x, y: current.y + 2, between: { x: current.x, y: current.y + 1 } },\n        { x: current.x, y: current.y - 2, between: { x: current.x, y: current.y - 1 } }\n      ].filter(pos => \n        pos.x > 0 && pos.x < BOARD_WIDTH - 1 && \n        pos.y > 0 && pos.y < BOARD_HEIGHT - 1 && \n        maze[pos.y][pos.x] === 'wall'\n      );\n\n      if (neighbors.length > 0) {\n        const next = neighbors[Math.floor(Math.random() * neighbors.length)];\n        maze[next.y][next.x] = 'path';\n        maze[next.between.y][next.between.x] = 'path';\n        stack.push(next);\n      } else {\n        stack.pop();\n      }\n    }\n\n    // 设置出口\n    maze[BOARD_HEIGHT - 2][BOARD_WIDTH - 2] = 'exit';\n\n    return maze;\n  };\n\n  const initializeGame = useCallback(() => {\n    const newBoard = generateMaze();\n    setGameState({\n      board: newBoard,\n      player: { x: 1, y: 1 },\n      exit: { x: BOARD_WIDTH - 2, y: BOARD_HEIGHT - 2 },\n      gameWon: false\n    });\n  }, []);\n\n  const movePlayer = useCallback((dx: number, dy: number) => {\n    setGameState(prev => {\n      const newX = prev.player.x + dx;\n      const newY = prev.player.y + dy;\n\n      // 检查是否可以移动到新位置\n      if (newX < 0 || newX >= BOARD_WIDTH || \n          newY < 0 || newY >= BOARD_HEIGHT || \n          prev.board[newY][newX] === 'wall') {\n        return prev;\n      }\n\n      // 检查是否到达出口\n      const gameWon = newX === prev.exit.x && newY === prev.exit.y;\n\n      return {\n        ...prev,\n        player: { x: newX, y: newY },\n        gameWon\n      };\n    });\n  }, []);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (gameState.gameWon) return;\n\n    switch (e.key) {\n      case 'ArrowUp':\n      case 'w':\n      case 'W':\n        movePlayer(0, -1);\n        break;\n      case 'ArrowDown':\n      case 's':\n      case 'S':\n        movePlayer(0, 1);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n      case 'A':\n        movePlayer(-1, 0);\n        break;\n      case 'ArrowRight':\n      case 'd':\n      case 'D':\n        movePlayer(1, 0);\n        break;\n    }\n  }, [gameState.gameWon, movePlayer]);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (gameState.gameWon) return;\n    \n    const touch = e.touches[0];\n    setTouchStart({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!touchStart || gameState.gameWon) return;\n    \n    const touch = e.touches[0];\n    const deltaX = touch.clientX - touchStart.x;\n    const deltaY = touch.clientY - touchStart.y;\n    \n    // 检测移动距离是否足够触发移动（防止微小移动）\n    const minSwipeDistance = 30;\n    \n    if (Math.abs(deltaX) > minSwipeDistance || Math.abs(deltaY) > minSwipeDistance) {\n      // 判断主要移动方向\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        // 水平移动\n        movePlayer(deltaX > 0 ? 1 : -1, 0);\n      } else {\n        // 垂直移动\n        movePlayer(0, deltaY > 0 ? 1 : -1);\n      }\n      // 重置触摸起点，允许连续滑动\n      setTouchStart({\n        x: touch.clientX,\n        y: touch.clientY\n      });\n    }\n  };\n\n  const handleTouchEnd = () => {\n    setTouchStart(null);\n  };\n\n\n  useEffect(() => {\n    initializeGame();\n  }, [initializeGame]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = BOARD_WIDTH * cellSize;\n    canvas.height = BOARD_HEIGHT * cellSize;\n\n    draw();\n  }, [draw]);\n\n  return (\n    <div className=\"maze-container\" ref={containerRef}>\n      <h1>小迷宫</h1>\n      <div className=\"game-area\">\n        <canvas \n          ref={canvasRef} \n          className=\"game-canvas\"\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        />\n        {gameState.gameWon && (\n          <div className=\"game-won\">\n            <h2>恭喜!</h2>\n            <p>你找到出口了！</p>\n          </div>\n        )}\n      </div>\n      <div className=\"game-controls\">\n        <button onClick={initializeGame}>重新开始</button>\n        <button onClick={() => navigate('/')}>返回首页</button>\n      </div>\n      <div className=\"game-instructions\">\n        <p>使用方向键、WASD或滑动屏幕来移动</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MazeGame;\n"],"names":["CELL_SIZE","BOARD_WIDTH","BOARD_HEIGHT","MazeGame","gameState","setGameState","useState","touchStart","setTouchStart","canvasRef","useRef","containerRef","navigate","useNavigate","calculateCellSize","useCallback","maxWidth","maxHeight","cellWidth","cellHeight","cellSize","setCellSize","draw","canvas","ctx","row","y","cell","x","useEffect","handleResize","newCellSize","generateMaze","maze","stack","start","current","neighbors","pos","next","initializeGame","newBoard","movePlayer","dx","dy","prev","newX","newY","gameWon","handleKeyDown","e","handleTouchStart","touch","handleTouchMove","deltaX","deltaY","minSwipeDistance","handleTouchEnd","jsxs","jsx"],"mappings":"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"}